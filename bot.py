from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import requests
import logging

# Bot Token and Admin ID
BOT_TOKEN = "5681235797:AAG1aNjC-FgDE5Zws1Z-t_4pGGkBN0yh6yM"
ADMIN_ID = 1980071557

# Store users for broadcasting
users = set()

# Logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# --- Command Handlers ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users.add(update.effective_user.id)
    await update.message.reply_text(
        "üìö ‡¥∏‡µç‡¥µ‡¥æ‡¥ó‡¥§‡¥Ç! /search <‡¥™‡µÅ‡¥∏‡µç‡¥§‡¥ï ‡¥®‡¥æ‡¥Æ‡¥Ç> ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç‡¥ö‡µç Anna's Archive-‡µΩ ‡¥®‡¥ø‡¥®‡µç‡¥®‡µç ‡¥™‡µÅ‡¥∏‡µç‡¥§‡¥ï‡¥ô‡µç‡¥ô‡µæ ‡¥§‡¥ø‡¥∞‡¥Ø‡¥æ‡¥Ç."
    )

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = " ".join(context.args)
    if not query:
        await update.message.reply_text("‚ö†Ô∏è ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥í‡¥∞‡µÅ ‡¥™‡µÅ‡¥∏‡µç‡¥§‡¥ï ‡¥®‡¥æ‡¥Æ‡¥Ç ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï. ‡¥â‡¥¶‡¥æ: /search Python")
        return

    search_url = f"https://archive.org/advancedsearch.php?q={query.replace(' ', '+')}&fl[]=identifier&sort[]=downloads desc&rows=1&page=1&output=json"

    try:
        res = requests.get(search_url).json()
        docs = res.get("response", {}).get("docs", [])
        if not docs:
            await update.message.reply_text("‚ùå ‡¥ï‡µç‡¥∑‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡¥£‡¥Ç, ‡¥™‡µÅ‡¥∏‡µç‡¥§‡¥ï‡¥Ç ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡¥ø‡¥Ø‡¥ø‡¥≤‡µç‡¥≤.")
            return

        identifier = docs[0]["identifier"]
        download_link = f"https://archive.org/download/{identifier}/{identifier}.pdf"

    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è ‡¥§‡¥ø‡¥∞‡¥Ø‡µÅ‡¥®‡µç‡¥®‡¥§‡¥ø‡µΩ ‡¥™‡¥ø‡¥∂‡¥ï‡µç ‡¥∏‡¥Ç‡¥≠‡¥µ‡¥ø‡¥ö‡µç‡¥ö‡µÅ. ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.")
        return

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì• Download PDF", url=download_link)]
    ])

    await update.message.reply_text(
        f"‚Äò{query}‚Äô ‡¥é‡¥®‡µç‡¥® ‡¥™‡µÅ‡¥∏‡µç‡¥§‡¥ï‡¥§‡µç‡¥§‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥°‡µó‡µ∫‡¥≤‡µã‡¥°‡µç ‡¥≤‡¥ø‡¥ô‡µç‡¥ï‡µç:",
        reply_markup=keyboard
    )

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìö *Ebooks Downloader Bot*\n\n"
        "Version: 1.0\n"
        "Created by: Your Name\n"
        "Anna's Archive, archive.org ‡¥™‡µã‡¥≤‡µÅ‡¥≥‡µç‡¥≥ ‡¥∏‡µà‡¥±‡µç‡¥±‡µÅ‡¥ï‡¥≥‡¥ø‡µΩ ‡¥®‡¥ø‡¥®‡µç‡¥®‡µÅ‡¥≥‡µç‡¥≥ ‡¥á‡¥¨‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡µæ ‡¥°‡µó‡µ∫‡¥≤‡µã‡¥°‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡¥Ç.\n\n"
        "Commands:\n"
        "/search <bookname> - ‡¥™‡µÅ‡¥∏‡µç‡¥§‡¥ï‡¥ô‡µç‡¥ô‡µæ ‡¥§‡¥ø‡¥∞‡¥Ø‡µÅ‡¥ï\n"
        "/about - ‡¥¨‡µã‡¥ü‡µç‡¥ü‡µç ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ"
    )
    await update.message.reply_text(text, parse_mode="Markdown")

# Admin-only check
def admin_only(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id != ADMIN_ID:
            await update.message.reply_text("üö´ ‡¥ï‡µç‡¥∑‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡¥£‡¥Ç, ‡¥à ‡¥ï‡¥Æ‡¥æ‡µª‡¥°‡µç ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡µç ‡¥Ö‡¥®‡µÅ‡¥µ‡¥¶‡¥®‡µÄ‡¥Ø‡¥Æ‡¥≤‡µç‡¥≤.")
            return
        return await func(update, context)
    return wrapper

@admin_only
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è ‡¥™‡µç‡¥∞‡¥∏‡¥∞‡¥ø‡¥™‡µç‡¥™‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥∏‡¥®‡µç‡¥¶‡µá‡¥∂‡¥Ç ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï. ‡¥â‡¥¶‡¥æ: /broadcast Hello users!")
        return

    message = " ".join(context.args)
    count = 0
    for uid in users:
        try:
            await context.bot.send_message(uid, f"üì¢ Admin Broadcast:\n{message}")
            count += 1
        except:
            pass

    await update.message.reply_text(f"‚úÖ ‡¥™‡µç‡¥∞‡¥∏‡¥∞‡¥ø‡¥™‡µç‡¥™‡¥ø‡¥ö‡µç‡¥ö‡¥§‡µç {count} ‡¥â‡¥™‡¥Ø‡µã‡¥ï‡µç‡¥§‡¥æ‡¥ï‡µç‡¥ï‡µæ‡¥ï‡µç‡¥ï‡µç.")

@admin_only
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üìä ‡¥Æ‡µä‡¥§‡µç‡¥§‡¥Ç ‡¥â‡¥™‡¥Ø‡µã‡¥ï‡µç‡¥§‡¥æ‡¥ï‡µç‡¥ï‡µæ: {len(users)}")

# --- Main ---

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("search", search))
    app.add_handler(CommandHandler("about", about))
    app.add_handler(CommandHandler("broadcast", broadcast))
    app.add_handler(CommandHandler("stats", stats))

    print("‚úÖ Bot started...")
    app.run_polling()

if __name__ == "__main__":
    main()
